generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cartitems {
  id         String   @id @default(uuid())
  cart_id    String
  product_id String
  quantity   Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cart      carts     @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product   products  @relation(fields: [product_id], references: [id])

  @@unique([cart_id, product_id])
  @@index([cart_id])
  @@index([product_id])
  @@map("cart_items")
}

model carts {
  id         String       @id @default(uuid())
  user_id    String       @unique
  status     carts_status @default(pending)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  user       users        @relation(fields: [user_id], references: [id])
  items      cartitems[]

  @@map("carts")
}

model categories {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  products   products[]

  @@map("categories")
}

model movements {
  id            String                  @id @default(uuid())
  product_id    String
  user_id       String
  quantity      Int
  movement_type movements_movement_type
  reason        String?
  movement_date DateTime                @default(now())

  product       products @relation(fields: [product_id], references: [id])
  user          users    @relation(fields: [user_id], references: [id])

  @@index([product_id])
  @@index([user_id])
  @@map("movements")
}

model notifications {
  id           String             @id @default(uuid())
  user_id      String
  product_id   String?            // Référence au produit concerné (optionnel)
  type         notifications_type // Principalement utilisé pour stock_alert et movement_confirmation
  message      String
  is_read      Boolean            @default(false)
  created_at   DateTime           @default(now())

  user         users              @relation(fields: [user_id], references: [id])
  product      products?          @relation(fields: [product_id], references: [id])

  @@index([user_id])
  @@index([product_id])
  @@map("notifications")
}

model password_resets {
  id         String   @id @default(uuid())
  user_id    String
  token      String   @unique
  expires_at DateTime
  used       Boolean  @default(false)
  created_at DateTime @default(now())

  user       users    @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("password_resets")
}

model products {
  id              String     @id @default(uuid())
  name            String
  description     String?    @db.Text
  sku             String     @unique
  quantity        Int        @default(0)
  min_stock_alert Int        @default(5)
  supplier        String?
  category_id     String?
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  category        categories? @relation(fields: [category_id], references: [id])
  cartItems       cartitems[]
  movements       movements[]
  notifications   notifications[]

  @@index([category_id])
  @@map("products")
}

model users {
  id            String     @id @default(uuid())
  pseudo        String     @unique
  email         String     @unique
  password_hash String     // Champ unique pour stocker le hash du mot de passe
  role          users_role @default(employee)
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  cart            carts?
  movements       movements[]
  notifications   notifications[]
  passwordResets  password_resets[]

  @@map("users")
}

// Les notifications sont principalement utilisées pour les alertes de stock faible
// et les confirmations de mouvements d'inventaire
enum notifications_type {
  stock_alert           // Généré quand un produit atteint le seuil min_stock_alert
  movement_confirmation // Confirmation d'une entrée ou sortie de stock
  system_alert          // Autres notifications système (rarement utilisé)
}

enum carts_status {
  pending    // Panier en cours
  completed  // Panier validé/terminé
}

enum movements_movement_type {
  entry
  exit
}

enum users_role {
  admin
  manager
  employee
}
